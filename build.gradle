import java.util.regex.Pattern

apply from: project.file('metadata.gradle')

ext {
    versionFile = project.file("version.properties")
    versionName = {
        def versionProps = getVersionProps()
        "${versionProps['major']}.${versionProps['minor']}.${versionProps['patch']}"
    }
    metadata.version = versionName()
}

buildscript {
    ext.kotlin_version = '1.2.41'
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // classpath 'com.novoda:bintray-release:0.4.0' // https://github.com/novoda/bintray-release
    }
}

allprojects {
    repositories {
        jcenter()
    }
    gradle.projectsEvaluated {
        if (project.name == "example") {
            return
        }
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
        }
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}

def updateReadme(oldVersion, newVersion) {
    def template = file('README.md').text
    def result = template.replaceAll(Pattern.quote(oldVersion), newVersion)
    file("README.md").withWriter { it << result }
}
def Properties getVersionProps() {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionFile))
    return versionProps
}
task bumpMajor << {
    def oldVersion = versionName()
    ant.propertyfile(file: versionFile) {
        entry(key: 'major', type: 'int', operation: '+', value: 1)
        entry(key: 'minor', type: 'int', operation: '=', value: 0)
        entry(key: 'patch', type: 'int', operation: '=', value: 0)
    }
    updateReadme(oldVersion, versionName())
    tasks.version.execute()
}
task bumpMinor << {
    def oldVersion = versionName()
    ant.propertyfile(file: versionFile) {
        entry(key: 'minor', type: 'int', operation: '+', value: 1)
        entry(key: 'patch', type: 'int', operation: '=', value: 0)
    }
    updateReadme(oldVersion, versionName())
    tasks.version.execute()
}
task bumpPatch << {
    def oldVersion = versionName()
    ant.propertyfile(file: versionFile) {
        entry(key: 'patch', type: 'int', operation: '+', value: 1)
    }
    updateReadme(oldVersion, versionName())
    tasks.version.execute()
}
task version << {
    println "v" + versionName()
}

String shell(String command) {
    def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
    if (proc.waitFor() != 0) {
        throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
    } else {
        def err = proc.err.text
        if (err) {
            System.err.println(err)
        }
    }
    return proc.in.text;
}
task releng << {
    def tag = "v" + versionName()
    println "Release engineering for ${tag}"
    def changes = shell "git status -s"
    if (changes.trim()) {
        throw new RuntimeException("There are changes not commited yet.\n${changes}")
    }
    println "> git tag ${tag}"
    shell "git tag ${tag}"
    println "> git push origin ${tag}"
    shell "git push origin ${tag}"
    shell "git push origin master"
}
